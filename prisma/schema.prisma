// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication & Profile
model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  emailVerified        DateTime?
  name                 String?
  image                String?
  passwordHash         String?
  subscriptionTier     String   @default("FREE") // FREE, STARTER, PRO, ENTERPRISE
  subscriptionStatus   String   @default("active") // active, cancelled, past_due, unpaid
  paypalSubscriptionId String?  @unique
  usageLimits         Json     @default("{\"videos\": 5, \"duration\": 120, \"fileSize\": 100}")
  currentUsage        Json     @default("{\"videos\": 0, \"duration\": 0, \"fileSize\": 0}")
  trialEndsAt         DateTime?
  lastLoginAt         DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  projects     Project[]
  subscriptions Subscription[]
  usageAnalytics UsageAnalytic[]
  notifications Notification[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Projects - User-created video projects
model Project {
  id             String   @id @default(cuid())
  userId         String
  title          String
  description    String?
  fileUrl        String?
  fileName       String?
  fileType       String?
  fileSize       BigInt?
  aiBlueprint    Json?    // AI-generated content blueprint
  script         Json?    // Generated video script
  videoUrl       String?
  thumbnailUrl   String?
  status         String   @default("draft") // draft, processing, rendering, completed, failed
  duration       Int?     // Video duration in seconds
  renderProvider String?  // synthesia, heygen, proprietary
  renderJobId    String?
  processingLogs Json?    @default("{}")
  settings       Json?    @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets ProjectAsset[]
  analytics ProjectAnalytic[]

  @@map("projects")
}

// Project Assets - Generated and uploaded assets
model ProjectAsset {
  id        String   @id @default(cuid())
  projectId String
  type      String   // image, audio, video, document
  url       String
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_assets")
}

// Subscriptions & Billing
model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  paypalSubscriptionId String   @unique
  planId              String   // FREE, STARTER, PRO, ENTERPRISE
  status              String   // active, cancelled, past_due, suspended
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false)
  paypalPlanId        String?
  metadata            Json?    @default("{}")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

// Payment Records
model Payment {
  id             String   @id @default(cuid())
  subscriptionId String
  paypalPaymentId String  @unique
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("USD")
  status         String   // completed, pending, failed, refunded
  paymentDate    DateTime
  metadata       Json?    @default("{}")
  createdAt      DateTime @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Admin Users
model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String
  role         String    @default("admin") // admin, super_admin, moderator
  permissions  Json      @default("{}")
  apiKey       String?   @unique // For external admin access
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  auditLogs AdminAuditLog[]

  @@map("admin_users")
}

// Admin Audit Logs
model AdminAuditLog {
  id          String   @id @default(cuid())
  adminUserId String
  action      String
  targetType  String? // user, project, subscription, system
  targetId    String?
  metadata    Json?    @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  adminUser AdminUser @relation(fields: [adminUserId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

// Usage Analytics
model UsageAnalytic {
  id        String   @id @default(cuid())
  userId    String
  action    String   // video_generated, file_uploaded, subscription_changed
  metadata  Json?    @default("{}")
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_analytics")
}

// Project Analytics
model ProjectAnalytic {
  id        String   @id @default(cuid())
  projectId String
  metric    String   // view_count, download_count, share_count
  value     Int      @default(0)
  metadata  Json?    @default("{}")
  timestamp DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_analytics")
}

// System Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // info, success, warning, error
  title     String
  message   String
  read      Boolean  @default(false)
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// AI Processing Jobs
model AiProcessingJob {
  id         String   @id @default(cuid())
  projectId  String?
  type       String   // extract_content, generate_script, render_video
  status     String   @default("pending") // pending, processing, completed, failed
  input      Json
  output     Json?
  errorLogs  Json?
  provider   String?  // openai, anthropic, synthesia, heygen
  startedAt  DateTime?
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("ai_processing_jobs")
}

// Platform Settings
model PlatformSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String   // ai, payment, system, security
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_settings")
}

// API Rate Limiting
model ApiRateLimit {
  id        String   @id @default(cuid())
  userId    String?
  ipAddress String?
  endpoint  String
  count     Int      @default(1)
  windowStart DateTime
  createdAt DateTime @default(now())

  @@unique([userId, endpoint, windowStart])
  @@unique([ipAddress, endpoint, windowStart])
  @@map("api_rate_limits")
}